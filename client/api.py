import re
from typing import Self
from httpx import Response
from sensei import Router, APIModel, Query, Manager

manager = Manager()
router = Router('https://dog.ceo/api', manager=manager)

class Breed(APIModel):
    """
    API model for handling dog breed information from the Dog CEO API.
    
    This class provides methods to retrieve all available dog breeds
    and their sub-breeds from the external API.
    """
    
    @classmethod
    @router.get("/breeds/list/all")
    def get_breeds(cls) -> dict[str, list[str]]:
        """
        Retrieve all available dog breeds and their sub-breeds.
        
        Returns:
            dict[str, list[str]]: A dictionary where keys are breed names
                and values are lists of sub-breed names.
        """
        pass # implementation generated by Sensei  
    
    @classmethod
    @get_breeds.finalize
    def _get_breeds_out(cls, response: Response) -> dict[str, list[str]]:
        """
        Process the response and return a dictionary with breeds.
        
        Args:
            response: HTTP response from the API.
            
        Returns:
            dict[str, list[str]]: Dictionary in the format {'breed': ['sub-breed1', 'sub-breed2', ...]}.
        """
        data = response.json()
        return data["message"]


class DogImage(APIModel):
    """
    API model for handling dog image information from the Dog CEO API.
    
    This class provides methods to retrieve random dog images and parse
    breed information from the image URLs.
    
    Attributes:
        url: The URL of the dog image
        breed: The main breed name  
        sub_breed: The sub-breed name (if applicable)
    """
    url: str               
    breed: str             
    sub_breed: str | None  

    @classmethod
    def _parse_url(cls, url: str) -> tuple[str, str | None]:
        """
        Extract breed and sub-breed information from the image URL.
        
        Args:
            url: Full URL containing '/breeds/{slug}/' segment
            
        Returns:
            tuple[str, str | None]: A tuple containing (breed, sub_breed).
                                   sub_breed is None if not present.
        """
        m = re.search(r"/breeds/(?P<slug>[^/]+)/", url)
        if not m:
            return "", None
        slug = m.group("slug")

        parts = slug.split("-", 1)
        main = parts[0]
        sub = parts[1] if len(parts) == 2 else None
        return main, sub

    @classmethod
    def _out_image(cls, response: Response) -> Self:
        """
        Process JSON response and create an instance with url, breed and sub_breed fields.
        
        Args:
            response: HTTP response from the API containing image URL
            
        Returns:
            Self: DogImage instance with parsed breed information
        """
        url = response.json()["message"]
        breed, sub_breed = cls._parse_url(url)
        return cls(url=url, breed=breed, sub_breed=sub_breed)

    @classmethod
    @router.get("/breeds/image/random")
    def _random(cls) -> Self:
        """Get a random dog image from any breed."""
        pass  # implementation generated by Sensei

    @classmethod
    @_random.finalize
    def _random_out(cls, response: Response) -> Self:
        """Process response for random image."""
        return cls._out_image(response)

    @classmethod
    @router.get("/breed/{breed}/images/random")
    def _random_by_breed(cls, breed: str = Query()) -> Self:
        """Get a random dog image from a specific breed."""
        pass # implementation generated by Sensei

    @classmethod
    @_random_by_breed.finalize
    def _random_by_breed_out(cls, response: Response) -> Self:
        """Process response for breed-specific image."""
        return cls._out_image(response)

    @classmethod
    def random(cls, breed: str | None = None) -> Self:
        """
        Get a random dog image, optionally from a specific breed.
        
        Args:
            breed: Optional breed name. If provided, returns an image from that breed.
                  If None, returns a random image from any breed.
                  
        Returns:
            Self: DogImage instance with image URL and parsed breed information.
        """
        if breed:
            return cls._random_by_breed(breed)
        return cls._random()
        